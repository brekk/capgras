import type { Either } from "Either"
import type { Error } from "IO"
import type { Maybe } from "Maybe"

import type { Dependency, DependencyMap } from "@/Dependency"
import type { MadJson, MadPackage } from "@/Parse"

import { prompt } from "Clinic"
import Buffer from "Clinic/Buffer"
import Dict from "Dictionary"
import { Left, Right, mapLeft } from "Either"
import File from "File"
import Fn from "Function"
import IO from "IO"
import { parse } from "Json/Parse"
import { Just, Nothing } from "Maybe"
import Process from "Process"
import Wish from "Wish"

import { madParse } from "@/Parse"



// read a madlib.json file like:
/*
{
  "name": "MadDoc",
  "version": "0.0.7",
  "madlibVersion": "0.23.14",
  "main": "src/Main.mad",
  "dependencies": [
    {
      "minVersion": "2.0.2",
      "url": "https://github.com/madlib-lang/madmarkdown-renderer/archive/refs/tags/v2.0.2.zip",
      "description": "MadMarkdownRenderer"
    },
    {
      "minVersion": "7.0.2",
      "url": "https://github.com/madlib-lang/madui/archive/refs/tags/v7.0.2.zip",
      "description": "MadUI"
    }
  ]
}
*/
// walk the dependencies and for each, determine if there's a need to replace

readMadlibJson :: String -> Wish Error MadPackage
export readMadlibJson = (source) => pipe(
  File.read,
  map(madParse),
)(source)

processDependencies :: List (Maybe Dependency) -> Wish Error DependencyMap
export processDependencies = pipe(
  map(processDependency),
  Wish.parallel,
  map(Dict.fromList),
)

processDependency :: Maybe Dependency -> Wish Error #[String, String]
export processDependency = (maybeDep) => pipe(
  where {
    Nothing =>
      Wish.bad(IO.UnknownError)

    Just(raw) =>
      pipe(
        .description,
        prompt($, Buffer.make(raw.url)),
        map((url) => #[raw.description, url]),
        Wish.mapRej(Fn.always(IO.UnknownError)),
      )(raw)
  },
)(maybeDep)
